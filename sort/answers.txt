sort1 uses: Bubble sort

reversed50000 - 0m4.964s
sorted50000 - 0m0.358s
random50000 - 0m5.648s

How do you know?: In worst case scenario (big O), bubble sort will take n squared steps to sort. Best case scenario (Omega) it will take n steps. Because it took significantly longer to sort a reversed list than a sorted list, it must mean it's a bubble sort.

sort2 uses: Merge sort

reversed50000 - 0m0.577s
sorted50000 - 0m0.458s
random50000 - 0m0.485s

How do you know?: In both best and worst case scenarios (Omega and big O, respectively), merge sort will take n log n steps, which is faster than n squared steps, but slower than n steps

sort3 uses: Selection sort

reversed50000 - 0m2.509s
sorted50000 - 0m2.435s
random50000 - 0m2.441s

How do you know?: In both best a worst case scenarios (Omega and big O, respectively), selection sort will take n squared steps, which is slower than merge sort (n log n steps)
